function BP_Network
%BP_NETWORK 使用 BP神经网络做预测
%   统计预测与决策书， page 131 例题
%   每次输出结果可能不一样

x = [970062	18718.3	103922	5560.1	8300.1	6955.81
985793	21826.2	104844	7225.8	9415.6	9810.4
1045899	26937.3	107256	9119.6	10993.7	12443.12
1115902	35260	111059	11271	14270.4	14410.22
1180396	48108.5	118729	20381.9	18622.9	17042.94
1234938	59810.5	129034	23499.9	23613.8	20019.3
1298421	70142.5	133032	24133.8	28360.2	22974
1278218	78060.9	133460	26967.2	31252.9	24941.1
1267427	83024.3	129834	26849.7	33378.1	28406.2
1293008	88479.2	131935	29896.2	35647.9	29854.7
1358682	98000.5	135048	39273.2	39105.7	32917.7
1401786	108068.2	143875	42183.6	43055.4	37213.5
1483447	119095.7	150656	51378.2	48135.9	43499.9
1564492	134977	171906	70483.5	52516.3	55566.6
1706412	159453.6	196648	95539.1	59501	70477.43
1862066	183617.4	216219	116921.8	67176.6	88773.61
2037060	215904.4	232167	140974	76410	109998.16
2275822	266422	242279	166863.7	89210	137323.94
2585973	316030.3	260552	179921.5	108487.7	172828.4
2825222	340320	274619	150648.1	132678.4	224598.77
3241807	399759.5	296916	201722.1	156998.4	278121.85
3696961	472115	317987	236402	183918.6	311485.13];

XN = x'; % 要转置，对每一行取最大最小
[input, inputps] = mapminmax(XN(2:6, :));
[output, outputps] = mapminmax(XN(1, :));
hiddenLayerNum = 5 * 2 +1;
net = newff(input, output, hiddenLayerNum, {'tansig', 'purelin'}); % 分别是隐含层传递函数，与输出层传递函数
net.trainParam.epochs = 1000; % 最大训练次数
net.trainparam.goal = 1e-7; % 训练目标
net.trainparam.show = 25; % 两次显示之间的训练次数
net.trainparam.mc = 0.9; % 权重阈值改变的重复度
net.trainparam.lr = 0.05; % 学习速率

net = train(net, input(:, 1:20), output(:, 1:20)); % 前20组数据作为训练数据
% 仿真预测2006-2011年的货运总量
YN = sim(net, input(:, 17:22));
Y = mapminmax('reverse', YN, outputps);
disp(Y);
plot(Y, '-*');
hold on;
plot(x(17:22, 1), ':og');
legend('预测数据', '历史数据');






end

